FIX ME!!!

написать инструкцию составления правил apparmor

- название файла должно соответствовать названию пакета в portage
- название профилей:
	в случае простого профиля - должно быть идентично названия пакета в portage
	в случае нескольких профилей - должно содержать название пакета перед названием исполняемого файла, разделенного точкой, например "acpid.acpi_listen"
	исключение:
	если профиль вызывается непосредственно из другого профиля, использование символа точки и дефиса недопустимо - заменять в вызываемом профиле все недопустимые символы нижним подчеркиванием. Например:
		/usr/bin/thunar Px -> thunar_root,



1) в каком порядке писать разрешения: PpCcUuIixmrwkl
Примеры:
	чтение и запись: rw
	чтение и исполнение с существующим профилем, если профиля нет использовать текущий: Pixr,
	чтение, запись, создание симлинка, разрешение лочить: rwkl
	чтение, запись и разрешение загрузки в память: mrw


2) составление профиля
# CAPABILITIES ---------------------------------------
# PSEUDO ---------------------------------------------
все что входит в /dev, /sys, /proc
# EXECUTABLES ----------------------------------------
все что запускается (не зависимо от места), файл профиля, указывать остальные разрешения (кроме запускаемых)
Важно! никогда не "сворачивать" в {}, исключение - симлинки/хардлинки или старые/новые название одного и того же исполняемого файла.
Порядок: исполняемый файл профиля, /bin, /sbin, /usr/bin, /usr/sbin, /opt, остальные
# READS/WRITES ---------------------------------------
все, что записывае-читаем в порядке: /etc, /usr, /opt, /run, /var
# USERS ----------------------------------------------
все, что записывае-читаем в /home
# TEMP -----------------------------------------------
все, что записывае-читаем в  /tmp, /var/tmp
обязательно делать для каждого отдельно, чтобы в последствии можно было сделать изоляцию X сервера
Важно, чтобы запись была привязана к владельцу процесса (owner), содержала уникальное для программы блок, или задавать точное кол-во символов, например:
	/tmp/ r,
	owner /tmp/alacarte-* rw,
	owner /tmp/??????	rw,
Не допускать записи вида: /tmp/* или /tmp/**
# NOISY ----------------------------------------------
Фактически - правила блокировка вывода в лог сообщений.


/etc/apparmor.d/abstractions
/etc/apparmor.d/local
/etc/apparmor.d/tunables
@{PROC}
@{HOME}
@{HOMEDIRS}
@{HOME_CACHE}
@{pid}
@{tid}
@{pids}
@{PYTHON}
@{PYTHON_PACKAGES}
@{PYTHON_EXEC}
@{PYTHON2}
@{PYTHON2_PACKAGES}
@{PYTHON2_EXEC}
@{PYTHON3}
@{PYTHON3_PACKAGES}
@{PYTHON3_EXEC}
@{PYTHON_EXEC_WRAPPER}
@{XDG_DESKTOP_DIR}="Desktop" "Рабочий стол"
@{XDG_DOWNLOAD_DIR}="Downloads" "Загрузки"
@{XDG_TEMPLATES_DIR}="Templates" "Шаблоны"
@{XDG_PUBLICSHARE_DIR}="Public" "Общедоступные"
@{XDG_DOCUMENTS_DIR}="Documents" "Документы"
@{XDG_MUSIC_DIR}="Music" "Музыка"
@{XDG_PICTURES_DIR}="Pictures" "Изображения"
@{XDG_VIDEOS_DIR}="Videos" "Видео"




http://wiki.apparmor.net/index.php/AppArmorRBAC
Для RBAC используем принцип различных веток правил (Profile tree).
Для root-профилей существует абстракция "user-systemwide-files" предоставляющая доступ к файлам с ограничениями DAC.

Profile Namespaces:
http://wiki.apparmor.net/index.php/AppArmorNamespaces
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.

Profile Stacking
http://wiki.apparmor.net/index.php/AppArmorStacking
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.


Если возможно, избегать вложений abstractions в другие abstractions.



Отладка.

/var/log/audit.log

flags=(complain)
apparmor_parser -r /etc/apparmor.d/bash
apparmor_parser -R /etc/apparmor.d/bash

Перевести все профили в принудительный отладочный режим:
root # cd /etc/apparmor.d/
root # find * -maxdepth 0 -type f -exec ln -sr ./{} ./force-complain/{} \;



После добавления нового профиля - проверить по имени процесса все профили.
Если данный процесс используется в других профилях с "ix" переделать процессы на "Px" или "Pix"

