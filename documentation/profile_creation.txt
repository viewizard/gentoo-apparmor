FIX ME! - маркеровка проблемных участков или участков, на которые надо обратить внимание.
BUG! - маркеровка пакетов, где были выявлена некоректная работа НЕ зависящая от профиля AppArmor.
RBAC! - маркеровка блоков связанных с ролевым ограничением. Т.к. часть профилей мы должны делать общими для всех ролей (из-за ограниченного кол-ва переходов профилей), маркеруем такие участки, возможно, в будущем мы сможем использовать другие механизмы RBAC.
IMPROVE! <описание> - маркеровка блока, которую можно улучшить после релиза запланированного функционала.
DELEGATION! <Имя родительского профиля> - маркировка блоков для последующего использования в функционале Delegation, которые не должны присутствовать в профиле, а должны делегироваться родительским профилем. Используем один маркер для двух случаев: 1) маркировка наследуемых ресурсов; 2) маркировка блоков делегируемых во время переключения профиля при запуске процесса.
FS ACCESS! [<Имя временного дочернего профиля>] - пока не поддерживается возможность делегирования в профиль во время переключения (на состояние модуля ядра 3.6, юзерспейс 2.11.0), маркеруем такие ix вызовы, для последующего использования с Px+{} (с делегированием доступов к файловой системе во время переключения профиля).
BUILD SYSTEM ONLY! - профиль (или его часть, вынесенная в отдельный блок) должен использоваться только на системах сборки.
IMA! маркер для подсистемы ядра IMA/EVM, т.к. мы используем IMA digsig на объектах, которые нужно запускать или загружать в память, при этом пользовательские файлы не будут подписаны (fowner>999), надо заранее определить перечень профилей, с которыми могут быть проблемы.
XORG! маркер переключения запуска x11-base/xorg-server через suid (от root) или запуск от пользователя
(?) - маркер предположения, требуется собрать больше информации. Может быть как самостоятельным, так и дополняющим маркером к любому другому маркеру из описанных выше.


написать инструкцию составления правил apparmor

настройка редактора:
	ширина TAB = 8 символов

- название файла должно соответствовать названию пакета в portage
	Исключение (пишем перед профилем "<номер>_", чтобы гарантировать отсутствие пакета с таким именем)
	0_default - default профиль (/**)
	1_shell - общие профили шела
	2_local - профили для пользовательских программ в /etc/cron.*/, /usr/local/bin/*, /usr/local/sbin/*
	3_kernel - профили для скриптов в /usr/src/*
	Для файлов с профилями в неймспейсе, <название пакета>:<неймспейс>
- название профилей:
	в случае простого профиля - должно быть идентично названия пакета в portage
	в случае нескольких профилей - должно содержать название пакета перед названием исполняемого файла, разделенного точкой, например "acpid.acpi_listen"
	исключения:
	если профиль вызывается непосредственно из другого профиля, использование символа точки и дефиса недопустимо - заменять в вызываемом профиле все недопустимые символы нижним подчеркиванием. Например:
		/usr/bin/thunar Px -> thunar_root,
	скрипты в /etc/init.d/* - <название пакета>.<имя файла>.init.d
	скрипты в /etc/cron.*/* - <название пакета>.<имя файла>.cron.{daily,hourly,monthly,weekly}
	default профиль должен быть в /etc/apparmor.d/0_default, нельзя менять название файла с 0_default на другое (используется в скриптах инициализации initramfs).


Важно! Правила профиля не учитывают расположения строк.
Т.е. запись 
@{USER_HOME_D}=@{USER_HOMEDIRS_D}/@{USER}
@{USER_HOMEDIRS_D}=/home
или 
@{USER_HOMEDIRS_D}=/home
@{USER_HOME_D}=@{USER_HOMEDIRS_D}/@{USER}
равнозначны.
Аналогично и для запрещающих правил:
deny /test r,
/** r,
или
/** r,
deny /test r,
будет блокировать доступ к файлу /test на чтение в обоих случаях. Необходимо учитывать, что AppArmor работает по принципу приоритетов:
	1) явно заданный deny для конечного объекта (в случае complain режима, может не работать!)
	2) разрешающее правило
	3) если профиль не содержит информации по объекту, применение разрещающего правила в случае complain режима или блокирующего в случае enforce.


Важно! Кол-во именованных (Px ->, Сx ->) переходов профиля не должно превышать 12 для одного профиля.
В случае превышения, будет выдана ошибка:
Profile имя_профиля has too many specified profile transitions.
Крайне желательно вызов дочерних профилей (Cx) делать по исполняемому файлу (без Cx -> "дочерний_профиль"), а не по названию. Или использовать переход на один общий профиль с расширенными допусками.



1) Порядок расположение правил доступа: PpCcUuIixmrawkl
Устанавливаем нужные правила доступа для объекта согласно расположению, пропуская остальные.
Примеры:
	чтение и запись: rw
	чтение и исполнение с существующим профилем, если профиля нет использовать текущий: Pixr,
	чтение, запись, создание линка, разрешение лочить: rwkl
	чтение, запись и разрешение загрузки в память: mrw
Более подробно:
	http://wiki.apparmor.net/index.php/AppArmor_Core_Policy_Reference#File_access_rules
* использовать "l" только в случае "/path l," = "link subset /path -> /**,". В остальных случаях указывать конечную цель линка.

Важно! Т.к. мы не знаем, как будет происходить дальнейшее развитие FS (возможно появление гибридных объектов), обязательно ограничивать доступы для директорий:
	/{,**}		rw,	# директории и все дочерние поддиректории и файлы - разрешаем создавать и читать (сейчас не поддерживается создание хардлинков и лок для директорий)
	/{,**/}*	kl,	# файлы, в т.ч. во всех дочерних поддиректориях - разрешаем лочить и делать хард линк.
	deny /{,**}	rwkl,	# запрещаем, в данном случае, допустимо применять для файлов и для директорий rwkl


2) Составление профиля. Порядок следование блоков:
# CAPABILITIES ---------------------------------------
# PTRACE ---------------------------------------------
ptrace (trace),
# SIGNAL ---------------------------------------------
signal (send) set=(usr1) peer="xinit",
# UNIX -----------------------------------------------
  unix (bind, listen)
  			type=stream
  			addr="@/tmp/dbus-*",
  unix (send, receive, accept)
  			type=stream
  			addr="@/tmp/dbus-*"
  			peer=(label="nvidia-drivers.nvidia-settings"),
# DBUS -----------------------------------------------
# MOUNT ----------------------------------------------
mount umount
# NETWORK --------------------------------------------
network netlink raw,
network inet dgram,
network inet6 dgram,
# PSEUDO ---------------------------------------------
все что входит в /dev, /sys, /proc
# EXECUTABLES ----------------------------------------
все что запускается (не зависимо от места), файл профиля, указывать остальные разрешения (кроме запускаемых)
Важно! никогда не "сворачивать" в {}, исключение - симлинки/хардлинки или старые/новые название одного и того же исполняемого файла.
Порядок: исполняемый файл профиля, /bin, /sbin, /usr/bin, /usr/sbin, /opt, остальные
Крайне не желательно использовать запуск процесса в текущем профиле (ix), необходимо стараться ограничить новый процесс -использовать запуск через дочерние профили по Cx, или Px. Исключение для ix: профили в которых по каким-то причинам очень трудно/невозможно избавится от ix, запускаемые только супер пользователем и не являющиеся службой (не находятся в памяти постоянно), в идеале, профили доступные только на тестовых/сборочных системах (т.е. профили программ, которые не будут установлены в конечной, пользовательской системе).
# READS/WRITES ---------------------------------------
все, что записывае-читаем в порядке: /etc, /usr, /opt, /run, /var
# USERS ----------------------------------------------
все, что записывае-читаем в /home
# TEMP -----------------------------------------------
все, что записывае-читаем в  /tmp, /var/tmp
обязательно делать для каждого отдельно, чтобы в последствии можно было сделать изоляцию X сервера
Важно, чтобы запись была привязана к владельцу процесса (owner), содержала уникальное для программы блок, или задавать точное кол-во символов, например:
	/tmp/ r,
	owner /tmp/alacarte-* rw,
	owner /tmp/??????	rw,
Не допускать записи вида: /tmp/* или /tmp/**
# NOISY ----------------------------------------------
Фактически - правила блокировка вывода в лог сообщений.
# DENY INHERIT ---------------------------------------
Если наследуем, но не нужно давать доступ на эти ресурсы. Так же, может понадобиться прописать flags=(attach_disconnected) и "deny /apparmor/.null rw," в случае, если часть ресурсов в дисконнекте.
Особенности запреда наследования (пока не введут нормальную реализацию наследования):
Родительский профиль -> 1й процесс, ставим просто deny -> 2й процесс запущенный из первого, ставим flags=(attach_disconnected) и "deny /apparmor/.null ?,"
Т.е. второй процесс и далее не видит ресурсов, они дисконектнуты для них, чтобы не вываливало в лог это сообщения - подключаем и запрещаем (дисконектнутый ресурс запретить нельзя по deny). Особый случай, если профиль использует ix запуск или запускает сам себя.


3) Абстракции (объединение части используемых групп правил).
Расположение: /etc/apparmor.d/abstractions
Основное правило - писать название абстракций разделяя слова символами "-" или ".". Нижнее подчеркивание в конце - тип ветки (исключение: нижнее подчеркивание используется в названии модуля/программы/пакета). Для root ветки соотв. _root или _sudo (особый случай, когда UID 0, но могут быть особые нюансы работы).
Если возможно, избегать вложений abstractions в другие abstractions.
Если необходимо вынести в абстракции запуск других процессов - использовать профили с запуском по Px/Cx, и только в крайнем случае использовать запуск в текущем профиле через ix (в основном, это необходимо для интерпритаторов таких как perl, python и openrc-run.sh из openrc).


abstractions/dbus/system, abstractions/dbus/session, abstractions/dbus/accessibility - использовать только в процессе отладки, в конечных профилях должны использоваться ограниченные (-strict) версии.
abstractions/dbus/session-bind - иногда используется как часть механизма проверки уже запущенной копии программы, в случае применения, необходимо проверить запуск 2 и более копий. Если используется бинд - значит в профиле должна быть секция DBUS (иначе, надо понимать, зачем программа биндит dbus).
abstractions/dbus/at-spi - Assistive Technology Service Provider Interface, фича gnome 2+. Как правило, используется только в gnome-программах, а не во всех gtk-программах.
abstractions/dconf - как правило, gtk-программы работают с dconf на прямую (без gconf).
abstractions/dbus/gconf - может использоваться qt-программами для взаимодействия по dbus с "реестром настроек" в gnome-окружении.
abstractions/qt - включает в себя abstractions/gtk, т.к. нужна поддержка GTK+ стиля.


4) Локальные правила.
Фрагменты профилей (в т.ч. дочерние подпрофили).
Расположение:  /etc/apparmor.d/local
Набор профилей (полноценные профили, кроме глобального инклуда), для всех локальных программ и скриптов.
Обход и загрузка профилей выполняется через профиль /etc/apparmor.d/2_local.
Расположение:
/etc/apparmor.d/local/hats/ - блоки hats, используются при переключении пользователей через PAM
/etc/apparmor.d/local/profile_blocks/ - локальные элементы профилей
/etc/apparmor.d/local/profiles/ - локальные профили (/usr/local/..., и /home/$USER/...)
/etc/apparmor.d/local/tunables.d/ - изменяемые константы


5) Старые профили, черновики - профили, требующие доработки перед использованием.
Расположение:  /etc/apparmor.d/unsupported
Если в процессе серьезного изменения модуля AppArmor, профиль не подвергался изменению и/или проверки данных изменений (был отключен, т.к. приложение не было установлено), его следует перенести в unsupported, и не оставлять в выключенном виде.


http://wiki.apparmor.net/index.php/AppArmorRBAC
Для RBAC используем принцип различных веток правил (Profile tree).
Для root-профилей существует абстракция "fs-access-by-pattern-systemusers" предоставляющая доступ к файлам (владельцы - системные и специальные пользователи) с ограничениями DAC.

Profile Namespaces:
http://wiki.apparmor.net/index.php/AppArmorNamespaces
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.

Profile Stacking
http://wiki.apparmor.net/index.php/AppArmorStacking
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.





Важно!
При внесении изменений в настройки или абстракции - перегенерировать бинарный кэш профилей самостоятельно, т.к. парсер не определяет время изменений всех вложенных файлов!
Компиляция бинарных кэшей должна выполнятся на ядре с таким же функционалом, какой имеется у ядра в конечном компьютере, где производится запуск и загрузка этих бинарных кэшей.
Удаление бинарных кешей (команда одной строкой):
find /etc/apparmor.d/cache -type f ! -iname ".*" -exec rm {} \;
или /usr/local/sbin/aa_portage.sh --delete
Гнерирование бинарных кешей (команда одной строкой):
LANG=C; for p in /etc/apparmor.d/*; do if [ -f $p ]; then apparmor_parser -rWQ $p; if [ "$?" != "0" ]; then break; fi; fi; done
или
/usr/local/sbin/aa_portage.sh --generate

Важно!
Шелл (/bin/bash) всегда должен быть в своем профиле, необходимо избегать использование ix из общего профиля, особенно если это GUI с большим кол-вом используемых абстракций.
В случае, если шелл вызывается из вложенного профиля, необходимо делать отдельный профиль и использовать "Px ->". Если будет добавлена возможность использования вложенных профилей во вложенных профилях черех "Cx ->", переделать.

Важно!
capability dac_read_search и dac_override,
перекрывают настройки DAC, должны применяться только в случае RBAC с root (sudo) или в случаях, когда это действительно нужно (это не должно быть нужно, если программа не запускается под root-ом).

Важно!
Если программа подразумевает аутентификацию через PAM, обязательно использовать hat по умолчанию (^DEFAULT, при необходимости - делать пустым {}), иначе будет работать с основным профилем программы (не переходить в hat).

Важно!
Не блокировать скрытые файлы домашней директории, например "deny @{USER_HOME_D}/.* r", т.к. это может привести к блокировке нужных файлов, например, @{USER_HOME_D}/.Xauthority.

Важно!
Нельзя совмещать в одном файле профили входящие в разные неймспейсы. На состояние версии утилиты 2.11 и ядра 3.5, после компиляции в бинарный кэш и загрузке - все профили будут в одном неймспейсе.

Важно!
Линки, если это не общие линки на всю систему делать через link, а не "l". С более жесткими ограничениями. По умолчанию,
"/path l," = "link subset /path -> /**,"
http://wiki.apparmor.net/index.php/AppArmor_Core_Policy_Reference#Link_Rules

Важно!
На линках ("link" или "l") может не работать audit. Для проверки надо убирать правило с линком и переводить весь профиль в flags=(complain).

Важно!
Участки файловой системы с массовым общим доступом программ, такие как: /tmp/, /var/tmp/, /dev/shm/ - должны быть со строгими правилами доступа: owner (если возможно), указание фрагментов (например, название программы), указание кол-ва символов (если генерируется только случайная часть в названии).

Важно!
Не используем утилиты (aa-complain, aa-enforce, aa-disable, aa-logprof) - перед выполнением проверяет все профили (причем не учитывая добавленный функционал, например, link), требует расположение профилей и их частей строго в соответствии с тараканами разработчиков apparmor (т.е. ругается на любые файлы и директории с произвольными файлами, поддиректории с профилями содержащими дочернии профили и т.п.). Непонятно почему разработка утилит идет не совместно с парсером и ядром (хотя все делается одной группой людей).
aa-logprof - не корректно отрабатывает вынесение общих частей в абстракции, работу с под профилями. Не функциональна в случае полносистемного RBAC с покрытием всех процессов.
aa-complain, aa-enforce - непонятно, зачем проверяет все профили и структуру, если работае только с одним профилем.
aa-disable - вообще непонятно, зачем проверяет профили, если цель работы - создание симлинка в директории "disable".

Важно!
При обновлении систем инициализации (sys-apps/openrc, sys-apps/systemd) или ядра, обязательно переводить систему в режим force-complain:
root # cd /etc/apparmor.d/
root # find * -maxdepth 0 -type f -exec ln -sr ./{} ./force-complain/{} \;
В противном случае, может возникнуть ситуация, когда изменения не позволят загрузиться.

Важно!
При использовании на профиле "shadow.login" flags=(complain) или force-complain, AppArmor будет требовать hat пользователя (если в pam указан первый пользователь). Т.е. надо учитывать, что в случае обучения, AppArmor будет считать, что профиль "shadow.login" должен содержать правильный hat.

Важно!
Программы, работающие с интернетом с изолированным доступом к файловой системе должны использовать абстракцию abstractions/fs/access-by-pattern-internet.

Важно!
Если прорамма работает с интернетом и вносит изменения или создаёт файлы за пределами абстракции abstractions/fs/access-by-pattern-internet, необходимо добавить перечень этих файлов (директорий) в абстракцию abstractions/fs/deny-by-pattern-internet.

Важно!
Для программ, использующих доступ к пользовательским файлам без ограничений (например, используется abstractions/fs/access-by-users-preset-r* с @{USERS_FILE}="**") обязательно использовать абстракции abstractions/fs/deny-private или abstractions/fs/deny-private-strict. Исключения - работа с файлами из этих абстракций.

Важно!
После обновления системы, установки и/или удаления пакетов через portage - выполнять проверку скриптом /usr/local/sbin/aa_portage.sh на необходимость включения/отключения (через симлинк в /etc/apparmor.d/disable/) профилей AppArmor.
Скрипт автиматически создает или удаляет симлинки из директории /etc/apparmor.d/disable/. В случае, если скриптом были выполнены действия, необходимо удалить и создать новый набор бинарных кэшей профилей.
/usr/local/sbin/aa_portage.sh --check

Важно!
В конечных системах нельзя ставить профили с flags=(complain), т.к. в таких профилях возможен запуск/выполнение/доступ ко всем объектам системы.

Важно!
chroot - https://wiki.ubuntu.com/DebuggingApparmor#AppArmor_and_chroot_environments
если не переключаем namespace - все делается в рамках текущего:
/var/chroot/etc/password r,   #post chroot path looks like access to file prechroot
/etc/passwd r, 
Как вариант, использовать флаги flags=(chroot_relative,chroot_attach).
chroot_relative - позволит не переписывать профиль, а использовать все пути относительно измененного рута, использовать этот флаг не очень хорошая идея, т.к. если пользователь выходит за рамки chroot-а, он получает сразу полный набор правил, работающий в основной системе.
chroot_attach (нужен, если используется  - подключит терминал, для этого во все профили (где нужно) придется добавить переподключенный tty и pts.

Важно!
Различия переменных PID:
@{pid} - PID текущего процесса (который защищается профилем безопасности), вместе с этим крайне желательно явно указывать пользователя-владельца (owner) (или, когда будет реализован функционал, перечень пользователей) кому разрешен доступ.
@{pids} - паттерн возможных PID процессов, которые могут быть в системе. Для 64-битной системы - число от 1 до 4194304.

Важно!
В профиле программы отвечающей за превью файлов, запрещать работать не только с интернет DMZ, но и с мусорной корзиной (trash).

Важно!
Все переходы на новый профиль во время выполнения должны быть прокоментированны с указанием пакета, к которому относится новый процесс (исключение - переход на новый процесс, исполняемый файл которого принадлежит этому же пакету). В случае с доступом к элементам, принадлежащим другим пакетам, их так же следует прокоментировать с указанием пакета. Это делается для быстрого поиска элементов, принадлежащих определенному пакету.

Важно!
Все правила с "m" или "x" на объектах в @{USER_HOME_D}, @{USER_HOME_CACHE_D} или во временных директориях (/tmp/, /var/tmp/) принадлежащих обычному пользователю (UID>=1000, правила с owner) должны иметь маркеровку "IMA!".

Важно!
Запрещаем компилирование байткода python при работе с IMA/EVM (c "path=" правилами).
В абстрации /etc/apparmor.d/abstractions/python используется фрагмент:
deny /usr/**/__pycache__/				w,	# IMA! Нельзя создавать байткод с IMA hash подписью в /usr.
deny /usr/**/*.{pyo,pyc}{,.*}				w,	# IMA! Нельзя создавать байткод с IMA hash подписью в /usr.
deny /opt/**/__pycache__/				w,	# IMA! Нельзя создавать байткод с IMA hash подписью в /opt.
deny /opt/**/*.{pyo,pyc}{,.*}				w,	# IMA! Нельзя создавать байткод с IMA hash подписью в /opt.
Запрещающий создания байткода в /usr и /opt, т.к. мы не можем разрешать запуск кем-то скомпилированных pyo/pyc файлов с IMA hash подписью. Плюс, т.к. часть пакетов тянет скомпилированные pyo/pyc файлы, затруднительно делать перечень всех пакетов с IMA hash подписью pyo/pyc файлов в политике IMA.

Важно!
Чтобы расширения файлов могли содержать большие и малые буквы, записывать в виде (например, для gif и jpg):
/*.{[gG][iI][fF],[jJ][pP][gG]}

Важно!
В переменных с директориями НЕЛЬЗЯ ставить крайний слэш (/), т.к. возможна некорректная работа целевыми путями в mount и link - не работает с двойными слэшами (//) (на состояние модуля ядра 3.6, юзерспейс 2.11.0).
Переменные с директориями должны в конце имени содержать _D, например @{USER_HOME_D}.
Обязательно использовать слэш после переменной, если используем переменную содержащую директорию:
@{USER_HOME_CACHE_D}/		r,
@{USER_HOME_D}/@{UID}		r,

Важно!
Все транзишены с "Cx/cx ->" на именованный вложенный профиль работают только если основной профиль не содержит переменной в имени. При этом путь может содержать переменную. НО! Если имени профиля нет, то транзишены с "Cx/cx ->" не работают, если путь содержит переменную (в данном случае, сам путь становится именем профиля).
Интересно, что парсер проверяет сам переход "->" и не позволяет использовать переменные после указателя в имени нового профиля (куда переходим), выдает ошибку "syntax error, unexpected TOK_SET_VAR, expecting TOK_END_OF_RULE". Косвенно, это подтверждает предположение, что имя профиля при именованном транзищене, используемое в таблице переходов в качестве индекса, не должно содержать переменных.
!!! ВАЖНО !!!
В случае использования патча ядра с fsuid (работа с добавленными маркерами к имени файла на запуске-профиле, вместо хардлинков), применять транзишены с "Cx/cx ->" НЕЛЬЗЯ. Следует использовать транзишены без именованных профилей (просто Cx/cx), или использовать транзишены на отдельные профили "Px/px ->".

Важно!
При использовании патча с добавление маркера fsuid при транзишене:
1) ВЕЗДЕ ставить на имя профиля маркер "@{p_...}" на путь к исполняемому файлу "@{t_...}";
2) Все ix переходы требуют отдельного добавления mmap (без "@{t_...}") для исполняемого файла;
3) Нельзя работать с именованными переходами на вложенные профили ("Cx/cx ->").



Полезные мелочи.

Поиск файлов содержащих 2 искомых слов/фразы рекурсивно:
grep -rl "acpid" ./* | xargs grep -l "/dev/console"

Поиск файлов содержащих 2 искомые части в одной строке:
grep -r 'Copyright (C).*2018' ./*

Поиск файлов содержащих один из 2-х искомых слов/фразы рекурсивно:
grep -rlE "acpid|/dev/console" ./*

Замена текста во всех файлах:
find /etc/apparmor.d/ -type f -exec sed -i "s/@{CHROOT}/@{CHROOT_D}/g" '{}' \;




Отладка.

/var/log/audit.log

Важно!!!
apparmor="DENIED" operation="open" profile="porthole" name="/proc/1620/mounts" pid=1620 comm="porthole" requested_mask="r" denied_mask="r" fsuid=1000 ouid=0
fsuid - (!!!) UID с которым работаем с объектами файловой системой
ouid - (!!!) UID объекта файловой системы


flags=(complain)
apparmor_parser -r /etc/apparmor.d/bash
apparmor_parser -R /etc/apparmor.d/bash

Перевести все профили в принудительный отладочный режим:
root # cd /etc/apparmor.d/
root # find * -maxdepth 0 -type f -exec ln -sr ./{} ./force-complain/{} \;


Вывод полного списка правил (sys-apps/apparmor-utils-2.11.1 некорректно работает с unix: не отображать deny, не отображает тип действия ставя просто пустые скобки; некорректно работает с файлами: не отображает deny):
apparmor_parser -Q --debug /etc/apparmor.d/gconf
Развернутый список всех правил (включая все вложения):
apparmor_parser -p /etc/apparmor.d/gconf


Получение списка процессов, например, unconfined (запущенных без профиля):
ps aux -Z | grep "unconfined"



После добавления нового профиля - проверить по имени процесса все профили.
Если данный процесс используется в других профилях с "ix" переделать на "Px" (проверить в профиле пересекающееся использование ресурсов через audit).


Если в выводе лог файла присутствует UTF-8 символы.

Nov 16 09:58:18 totoro kernel: [51425.379441] audit: type=1400 audit(1510815498.806:2952): apparmor="DENIED" operation="file_inherit" profile="libreoffice.bin//shell" name=2FD182D0B5D181D182D0B8D180D183D0B5D0BC2F pid=28742 comm="sh" requested_mask="wr" denied_mask="wr" fsuid=1000 ouid=1000

Используем утилиту aa-decode
# aa-decode 2FD182D0B5D181D182D0B8D180D183D0B5D0BC2F
Decoded: /тестируем/





Отладка профилей процессов выполняющихся после остановки службы syslog-ng.

/etc/syslog-ng/syslog-ng-test-audit.conf
########################################################################################
@version: 3.7
# $Id$

@include "scl.conf"

options { 
	threaded(yes);
	chain_hostnames(no); 
	stats_freq(43200); 
	mark_freq(3600); 
};

source kernel {
	file("/proc/kmsg");
};

destination console_all { file("/dev/tty12"); };
filter f_audit { message("^(\\[.*\..*\] |)audit.*") and not message(".*avc: .*"); };
log { source(kernel); filter(f_audit); destination(console_all); };
########################################################################################

# Тестовая конфигурация для проверки профилей Apparmor.
# 1) Останавливаем службу
#	/etc/init.d/syslog-ng stop
# 2) Запускаем в терминале:
#	/usr/sbin/syslog-ng --persist-file "/var/lib/syslog-ng/syslog-ng.persist" --cfgfile "/etc/syslog-ng/syslog-ng-test-audit.conf" --pidfile "/run/syslog-ng.pid" &
# 3) Выключаем/перезагружаем компьютер, смотрим в 12-ю консоль
