FIX ME! - маркеровка проблемных участков или участков, на которые надо обратить внимание.
BUG! - маркеровка пакетов, где были выявлена некоректная работа НЕ зависящая от профиля AppArmor.
RBAC! - маркеровка блоков связанных с ролевым ограничением. Т.к. часть профилей мы должны делать общими для всех ролей (из-за ограниченного кол-ва переходов профилей), маркеруем такие участки, возможно, в будущем мы сможем использовать другие механизмы RBAC.


написать инструкцию составления правил apparmor

настройка редактора:
	ширина TAB = 8 символов

- название файла должно соответствовать названию пакета в portage
- название профилей:
	в случае простого профиля - должно быть идентично названия пакета в portage
	в случае нескольких профилей - должно содержать название пакета перед названием исполняемого файла, разделенного точкой, например "acpid.acpi_listen"
	исключение:
	если профиль вызывается непосредственно из другого профиля, использование символа точки и дефиса недопустимо - заменять в вызываемом профиле все недопустимые символы нижним подчеркиванием. Например:
		/usr/bin/thunar Px -> thunar_root,


Важно! Правила профиля не учитывают расположения строк.
Т.е. запись 
@{HOME}=@{HOMEDIRS}/*/ /root/
@{HOMEDIRS}=/home/
или 
@{HOMEDIRS}=/home/
@{HOME}=@{HOMEDIRS}/*/ /root/
равнозначны.
Аналогично и для запрещающих правил:
deny /test r,
/** r,
или
/** r,
deny /test r,
будет блокировать доступ к файлу /test на чтение в обоих случаях. Необходимо учитывать, что AppArmor работает по принципу приоритетов:
	1) явно заданное deny для конечного объекта
	2) разрешающее правило
	3) применение разрещающего правила в случае complain режима, или блокирующего в случае enforce.


Важно! Кол-во уникальных переходов профиля не должно превышать 12 для одного профиля (Px ->, Сx ->).
В случае превышения, будет выдана ошибка:
Profile имя_профиля has too many specified profile transitions.
Крайне желательно вызов дочерних профилей (Cx) делать по исполняемому файлу (без Cx -> "дочерний_профиль"), а не по названию. Или использовать переход на один общий профиль с расширенными допусками.



1) в каком порядке писать разрешения: PpCcUuIixmrwkl
Примеры:
	чтение и запись: rw
	чтение и исполнение с существующим профилем, если профиля нет использовать текущий: Pixr,
	чтение, запись, создание симлинка, разрешение лочить: rwkl
	чтение, запись и разрешение загрузки в память: mrw


2) составление профиля
# CAPABILITIES ---------------------------------------
# PTRACE ---------------------------------------------
# SIGNAL ---------------------------------------------
# UNIX -----------------------------------------------
# MOUNT ----------------------------------------------
# NETWORK --------------------------------------------
# PSEUDO ---------------------------------------------
все что входит в /dev, /sys, /proc
# EXECUTABLES ----------------------------------------
все что запускается (не зависимо от места), файл профиля, указывать остальные разрешения (кроме запускаемых)
Важно! никогда не "сворачивать" в {}, исключение - симлинки/хардлинки или старые/новые название одного и того же исполняемого файла.
Порядок: исполняемый файл профиля, /bin, /sbin, /usr/bin, /usr/sbin, /opt, остальные
# AUDIT EXECUTABLES ----------------------------------
"audit" или "audit deny" для исполняемых файлов, когда нельзя запускать, но надо зафиксировать
# READS/WRITES ---------------------------------------
все, что записывае-читаем в порядке: /etc, /usr, /opt, /run, /var
# AUDIT READS/WRITES ---------------------------------
# USERS ----------------------------------------------
все, что записывае-читаем в /home
# AUDIT USERS ----------------------------------------
"audit" или "audit deny" для файлов
# TEMP -----------------------------------------------
все, что записывае-читаем в  /tmp, /var/tmp
обязательно делать для каждого отдельно, чтобы в последствии можно было сделать изоляцию X сервера
Важно, чтобы запись была привязана к владельцу процесса (owner), содержала уникальное для программы блок, или задавать точное кол-во символов, например:
	/tmp/ r,
	owner /tmp/alacarte-* rw,
	owner /tmp/??????	rw,
Не допускать записи вида: /tmp/* или /tmp/**
# NOISY ----------------------------------------------
Фактически - правила блокировка вывода в лог сообщений.


/etc/apparmor.d/abstractions
/etc/apparmor.d/local
/etc/apparmor.d/tunables
@{CHOST}
@{BLOCK_VIRT}
@{BLOCK_MEDIA}
@{BLOCK_REAL}
@{BLOCK_ALL}
@{PROC}
@{HOME}
@{HOME_USERS}
@{HOMEDIRS}
@{HOME_CACHE}
@{shell}
@{kernel_ver}
@{kernel}
@{pid}
@{tid}
@{pids}
@{PYTHON}
@{PYTHON_PACKAGES}
@{PYTHON_EXEC}
@{PYTHON2}
@{PYTHON2_PACKAGES}
@{PYTHON2_EXEC}
@{PYTHON3}
@{PYTHON3_PACKAGES}
@{PYTHON3_EXEC}
@{PYTHON_EXEC_WRAPPER}
@{XDG_DESKTOP_DIR}="Desktop" "Рабочий стол"
@{XDG_DOWNLOAD_DIR}="Downloads" "Загрузки"
@{XDG_TEMPLATES_DIR}="Templates" "Шаблоны"
@{XDG_PUBLICSHARE_DIR}="Public" "Общедоступные"
@{XDG_DOCUMENTS_DIR}="Documents" "Документы"
@{XDG_MUSIC_DIR}="Music" "Музыка"
@{XDG_PICTURES_DIR}="Pictures" "Изображения"
@{XDG_VIDEOS_DIR}="Videos" "Видео"




http://wiki.apparmor.net/index.php/AppArmorRBAC
Для RBAC используем принцип различных веток правил (Profile tree).
Для root-профилей существует абстракция "user-systemwide-files" предоставляющая доступ к файлам с ограничениями DAC.

Profile Namespaces:
http://wiki.apparmor.net/index.php/AppArmorNamespaces
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.

Profile Stacking
http://wiki.apparmor.net/index.php/AppArmorStacking
Предположительно, изменения в ядре только убунтовском, в апстриме его нет или поддержка частичная.


Если возможно, избегать вложений abstractions в другие abstractions.



Важно!
При внесении изменений в настройки или абстракции - перегенерировать бинарный кэш профилей самостоятельно, т.к. парсер не определяет время изменений всех вложенных файлов!

Важно!
Шелл (/bin/bash) всегда должен быть в своем профиле, необходимо избегать использование ix из общего профиля, особенно если это GUI с большим кол-вом используемых абстракций.
В случае, если шелл вызывается из вложенного профиля, необходимо делать отдельный профиль и использовать "Px->". Если будет добавлена возможность использования вложенных профилей во вложенных профилях черех "Cx->", переделать.

Важно!
capability dac_read_search и dac_override,
перекрывают настройки DAC, должны применяться только в случае RBAC с root или в случаях, когда это действительно нужно.

Важно!
Если программа подразумевает аутентификацию через PAM, обязательно использовать hat по умолчанию (^DEFAULT), иначе будет работать с основным профилем программы.




Отладка.

/var/log/audit.log

flags=(complain)
apparmor_parser -r /etc/apparmor.d/bash
apparmor_parser -R /etc/apparmor.d/bash

Перевести все профили в принудительный отладочный режим:
root # cd /etc/apparmor.d/
root # find * -maxdepth 0 -type f -exec ln -sr ./{} ./force-complain/{} \;



После добавления нового профиля - проверить по имени процесса все профили.
Если данный процесс используется в других профилях с "ix" переделать процессы на "Px" или "Pix"

