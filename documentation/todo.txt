http://wiki.apparmor.net/index.php/Documentation
out of tree patches (kernel) git://kernel.ubuntu.com/jj/apparmor-backports
out of tree patches (user-space) git://git.launchpad.net/~jjohansen/apparmor


- мы используем confined init (SECURITY_APPARMOR_UNCONFINED_INIT выключен)
На ранней загрузке переключаемся на свой default профиль. Нужно как-то больше его ограничить:
1) После переключения рут (syscall chroot, или запуска /sbin/init), перезагружать профиль default, и не давать уже запускать /bin/busybox, /bin/udevadm, /bin/grep (особенно напрягают первые 2).
2) Если появится возможность, как-то через переменные вводить ограничения, или отслеживать что запускать /bin/busybox, /bin/udevadm, /bin/grep можно только на tmpfs (т.е. только в процессе ранней загрузки).


- child profile names don't allow '-'
Баг уже открыт в и процессе исправления, после этого скорректировать все профили с нижним подчеркиванием.
https://bugs.launchpad.net/apparmor/+bug/1197145


- когда Apparmor сможет ставить маркеры на файлы по условию (xattr), сделать интеграцию с IMA/EVM,
чтобы эффективно обходить подпись лог файлов (/var/log/*).
Фактически, нужно как-то подписывать лог файлы, чтобы не проверять их на чтении-записи (только запуск, ммеп и прочее).


- Setuid rules (непонятно когда будет работать)
requires capability setuid
 setuid -> fred,
 setuid -> (fred, george)
2 options:
 setuid rule embedded within the cap making it a limited cap
   capability setuid (fred, george),  remains backwards compat


- extended conditionals
'if' <condition> '{' <rules> '}'
1) Например, через tunables управлять видео, звуком, аутентификацией (kerberos,...) и т.п., открывая только нужное.
2) Устанавливать блоки кода для систем инициализации (openrc, systemd). Пока не понятно, можно ли будет работать с профилями, или только правила профилей (содержанием профилей).
http://wiki.apparmor.net/index.php/AppArmor_Core_Policy_Reference#extended_conditionals


- Stacking (уже доступен с 3.5 версии изменений ядра, 2.11 утилиты) Работает по принципу пересечения профилей (логическое "И" для правил профилей). Непонятно как это будет работать, если у нас все так же ограничение всего на 12 переходов на другие профили.
    /bin/** px -> &two,
Will compute the profile transition as per
    /bin/** px,
and then stack the profile two on top of that transition.
    /bin/** ix -> &two,
is equivalent to
    /bin/** px -> @{profile_name}//&two,
http://wiki.apparmor.net/index.php/AppArmorStacking
http://wiki.apparmor.net/index.php/StackingConfiningUsers


- Delegation (будет примерно в 4-5 версии изменений ядра), т.к. убунтовские патчи убирают 100% делегейшен на открытые ресурсы в дочерний процесс, надо прописывать это отдельно (указывать какие ресурсы открытые в основном процессе может использовать дочерний). Не совсем понятно, когда это будет доступно хотя бы в утилите, но описание уже есть:
1) указываем ресурс для любого профиля который в последствии может быть вызван
	http://wiki.apparmor.net/index.php/AppArmor_Core_Policy_Reference#Delegation
2) при вызове на исполнение, объединение профилей
<path> <qualifier>'x' [[' ->' <profile name>] ['+' <profile name>]] ','
<path> 'x' '->' <profile list> ',' (not yet supported)
http://wiki.apparmor.net/index.php/AppArmorDelegation#How_Delegation_is_Expressed
http://wiki.apparmor.net/index.php/AppArmor_Core_Policy_Reference#Execute_rules
http://wiki.apparmor.net/index.php/AppArmorProfileSpec
3) Все профили с маркеровкой FS ACCESS! переработать (вынести во внешние профили с делегейшеном убрав ix, в самих профилях, возможно, убрать какие-то элементы, например, доступ к какой-то части фс), профили с DELEGATION! переработать, давая из переключающего на Px профиля нужные делегейшены. Важно - непонятно как отслеживать откуда был вызов (где добавлять блоки), использовать только именованные или дочерние профили (?), или делать все вызовы через audit.


- Namespaces. Работают, можно делать переходы, например:
	/bin/sleep	Pxr -> :user:sleep,
но зона видимости профилей - только текущий неймспейс. Т.е. если как в примере перешли в неймспейс :user:, то больше недоступны профили из базового неймспейса. Работает только в иерархической структуре, из неймспейса видно только дочерний (профили в нем).
Возможно, если будет возможность работать с переходами в другие неймспейсы, будет иметь смысл использовать их для RBAC. Сейчас они ориентированны только на создания ограничний для контейнеров (собственно, это основная цель у разработчиков).
** In AppArmor 4 it is possible to have the view be a namespace that is different from the current namespace.
http://wiki.apparmor.net/index.php/AppArmorNamespaces
http://wiki.apparmor.net/index.php/AppArmorStacking#Using_Stacking_in_combination_with_Policy_Namespaces
** the current namespace is always the namespace of the profile in the stack having its permissions evaluated
- Позже сделать для неймспейсов ограничения в base абстракции, чтобы сингалы, и прочее не передавались туда-сюда просто так.


- Using AppArmor to confine and secure X Windows applications (4.0 AppArmor kernel, 2.?? AppArmor user space)
Нужен будет пропатченный иксовый сервер - git://git.launchpad.net/~jjohansen/xorg-server
http://wiki.apparmor.net/index.php/AppArmorXace


- Using AppArmor to confine and secure DConf/GSettings for Desktop applications (вообще непонятно когда будет)
http://wiki.apparmor.net/index.php/AppArmorGSettings


- Базовый deny на неподдерживаемые файлы.
У программ, с явным перечнем расширений, блокировать через deny обращение к открытию файлов не имеющие расширений вообще, начинающиеся с точки. Уменьшить вывод предупреждений в лог.
(?) делать по фиксированным путям, чтобы исключить блокировку нужных файлов?


- portage.emerge улучшение ограничений в следующих версиях AppArmor.
Когда будет введен режим исключения в правилах, откорректировать:
/usr/** rwl, # FIX ME! exclude "/usr/local" with {*^}/{**^}, when this features will be available
/var/** rwk, # FIX ME! exclude "/var/log" (allow only subfolder creation and .keep* files) with {*^}/{**^}, when this features will be available


- network улучшение ограничений в следующих версиях AppArmor.
<address_expr> ::= [('source'|'src') <domain_addr> ['on' <iface>]] [('destination'|'dst' <domain_addr>]
<domain_addr> ::= (<ipv4_addr> | <ipv6_addr> | ..)
 network tcp src 192.168.1.1:80 dst 170.1.1.0:80,
 <ipv4_addr> ::= [<ipv4_??>['/'(<ipv_??>|<num>)]][':'<ports>]
 <ipv4_??> ::= <??_expr>'.'<??_expr>'.'<??_expr>'.'<??_expr>
 <??_expr> ::= (<num>|<range>|'*')
 <ports> ::= (<num>|<range>)(','<num>|<range>])*
 <range> ::= <num> '-' <num>
 192.168.1.1
 192.168.1.1-254
 192.168.1.1:80
 192.168.1.1:80,81
 192.168.1.1:80,81,100-200


- "owner" улучшение ограничений в следующих версиях AppArmor.
extended ownership tests (not currently supported)
 eg.
 owner=fred
 owner=1001
 owner=(fred)
 owner=(fred george)
 owner=(fred 1001)
/etc/apparmor.d/abstractions/authentication, например, хорошо бы сделать с owner=0
